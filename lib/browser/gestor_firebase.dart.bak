import 'dart:async';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';

import 'dart:convert' show utf8;

class GestorFirebase {
  // static String termCondicFile = 'terminos&condiciones11-03-2020.txt';
  final String termCondicPath = 'terminos_y_condiciones.txt';
  final String notaDelAutorPath = 'nota_del_autor.txt';
  final String coleccionUsuariosID = 'usuarios';
  final String coleccionSesionesID = 'sesiones';
  // final String coleccionUsosID = 'usos';
  
  String usuarioID;
  String sesionID;  

  // Registro de uso
  // 1 Horario
  // 1.1 Horario > Compartir
  // 1.2 Horario > Seleccionar otro semestre
  // 2 Boletin
  // 2.1 Boletin > Seleccionar otro semestre
  // 2.2 Boletin > Notas
  // 2.3 Boletin > Silabo
  // 3 Plan de Estudios
  // 4 Programacion Academica
  // 5 Historial Academico
  // 5.1 Historial Academico > cambiar pp grafico
  // 5.2 Historial Academico > seleccionar semestre
  // 6 Informe Acad√©mico
  // 7 Consulta de pagos
  // 8 Plataforma virtual
  // 9 SIGA
  // 10 Cerrar sesion
  // 11 Compartir App
  // 12 About
  // 13 Terminos y condiciones

  static const String HORARIO = '1';
  static const String HORARIO_COMPARTIR = '1-1';
  static const String HORARIO_SELEC_SEM = '1-2';

  static const String BOLETIN = '2';
  static const String BOLETIN_SELEC_SEM = '2-1';
  static const String BOLETIN_NOTAS = '2-2';
  static const String BOLETIN_SILABO = '2-3';
  
  static const String PLAN = '3';

  static const String PROGRAMACION = '4';

  static const String HISTORIAL = '5';
  static const String HISTORIAL_CAMBIAR_PP_GRAF = '5-1';
  static const String HISTORIAL_SELEC_SEM = '5-2';
  
  static const String INFORME = '6';

  static const String CONSULTA_DE_PAGOS = '7';
  static const String PLATAFORMA_VIRTUAL = '8';
  static const String SIGA = '9';

  static const String CERRAR_SESION = '10';
  static const String COMPARTIR_APP = '11';
  static const String ABOUT = '12';
  static const String TERM_Y_COND = '13';

  static const List<String> LISTA_USOS_CODIGOS = [
    HORARIO, HORARIO_COMPARTIR, HORARIO_SELEC_SEM,
    BOLETIN, BOLETIN_SELEC_SEM, BOLETIN_NOTAS, BOLETIN_SILABO,
    PLAN, 
    PROGRAMACION, 
    HISTORIAL, HISTORIAL_CAMBIAR_PP_GRAF, HISTORIAL_SELEC_SEM,
    INFORME,
    CONSULTA_DE_PAGOS, 
    PLATAFORMA_VIRTUAL,
    SIGA,
    CERRAR_SESION, 
    COMPARTIR_APP,
    ABOUT,
    TERM_Y_COND,
  ];

  StreamController<String> streamController = StreamController<String>();

  GestorFirebase(){
    streamController.stream.listen((event) {
      _registrarUso(event);
    });
  }

  // Registro de inicio de sesi√≥n
  void registrarInicioSesion(String cu){
    _print('Registrando sesi√≥n de usuario $cu');
    var refUsuario = Firestore.instance.collection(coleccionUsuariosID).document(cu);    
    var refSesion = refUsuario.collection(coleccionSesionesID).document();  

    // Crear data
    Map<String, dynamic> data = {'fecha': Timestamp.now()};
    int cero = 0;
    data.addAll(Map.fromIterable(
      LISTA_USOS_CODIGOS, 
      key: (codigo) => codigo.toString(),
      value: (codigo) => cero,
    ));

    // Grabar data
    // refSesion.setData({
    //   'fecha': Timestamp.now(),
    // })
    refSesion.setData(data)
      .then((value) async {
        _print('Sesi√≥n registrada con √©xito ${refSesion.documentID} ‚úÖ');
        usuarioID = cu;
        sesionID = refSesion.documentID;
        // _mostrarSesionesRegistradas();
      })
      .catchError((Object error){
        _print('Algo fue mal: $error ‚ùå');
      });
  }

  void registrarUso(String usoIdentificadorCampo) async {
    streamController.add(usoIdentificadorCampo);
  }

  void _registrarUso(String usoIdentificadorCampo) async {
    _print('Registrando uso $usoIdentificadorCampo');
    var refUsuario = Firestore.instance.collection(coleccionUsuariosID).document(usuarioID);    
    var refSesion = refUsuario.collection(coleccionSesionesID).document(sesionID);
    // var refUso = refSesion.collection(coleccionUsosID).document();
    _print('transacci√≥n en el campo $usoIdentificadorCampo de la sesion ${refSesion.documentID} del usuario ${refUsuario.documentID}');
    await Firestore.instance.runTransaction((transaction) async {
      DocumentSnapshot freshSnap = await transaction.get(refSesion);
      await transaction.update(freshSnap.reference, {
        usoIdentificadorCampo: freshSnap[usoIdentificadorCampo] + 1,
      });
    // }).then((value) => _print('Done'));
    });
    _print('Done');
  }





  // Archivos txt
  Future<String> _obtenerArchivoTexto(String path) async {
    // Obtener direcci√≥n de descarga 
    _print('Estableciendo conexi√≥n con firebase para $path');
    StorageReference referencia = FirebaseStorage.instance.ref().child(path);
    String direccionDescarga = await referencia.getDownloadURL();   
    _print('DownloadURL: $direccionDescarga'); 

    // Descargar archivo
    var httpClient = new HttpClient();
    var request = await httpClient.getUrl(Uri.parse(direccionDescarga));
    var response = await request.close();
    var bytes = await consolidateHttpClientResponseBytes(response);
    _print('$path descargado'); 

    // Retornar como cadena
    // return String.fromCharCodes(bytes);
    return utf8.decode(bytes);
  }

  Future<String> obtenerTerminosYCondiciones() async => _obtenerArchivoTexto(termCondicPath);

  Future<String> obtenerNotaDelAutor() async => _obtenerArchivoTexto(notaDelAutorPath);

  void _print(Object object) => print('ü•µ: $object');
}